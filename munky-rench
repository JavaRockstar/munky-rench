#!/bin/bash
#
#
#
#
# Munky-rench is the swiss army knife for apk modding in bash
# Licensed under GPL

dir=`pwd `
DESC="Munky Rench is the swiss-army knife of apk modding in Linux"
VERSION="VERSION 1.1 REMIX"



echo 
echo 
echo "   88.       .88  888      88  8888      88  888    888  888     888    "
echo "   8888.   .8'88  888      88  888 88    88  888  88       88   88      "
echo "   888'8. .8' 88  888      88  888   88  88  888888          888      "
echo "   888 '8.8'  88  888      88  888     8888  888  88         888    "
echo "   888  '8'   88  88888888888  888       88  888    888      888              "
echo "                                                 "
echo
echo "     .d8888888   88888888  8888     88  888888888  888    88  "
echo "    :88    888   888       888 88   88  888        888    88  "
echo "      '9888888   888888    888  88  88  888        888888888  "
echo "      888  888   888       888   88 88  888        888    88  "
echo "   8888    888   88888888  888    8888  888888888  888    88  "
echo
echo "                               FOR   "
echo
echo
echo "            88     8888  88b  88  88   88  88.   .88      "
echo "            88      88   888b 88  88   88   '88 88'   "
echo "            88      88   88 8b88  88   88     :8:          "
echo "            88      88   88  888  88   88   ,88 88,              "
echo "            888888 8888  88   88  8888888  88.   .88           "
echo 



echo "                        ENTER to continue"

read
echo $DESC                                        
echo $VERSION  
echo
echo "      ----miketheinkman---miketheinkman---miketheinkman----" 
echo


echo
echo
echo "                     APK MUNKY-BUSINESS "
echo "------------------------------------------------------------"

#frameworks
if [ -d "$dir/frameworks" ]

	then  :
		else

		mkdir $dir/frameworks



#place-here-for-modding
if [ -d "$dir/place-here-for-modding" ]

	then 	:

		else

 		mkdir $dir/place-here-for-modding
mkdir $dir/mod-projects


#zipalign
if [ -d "$dir/zipalign" ]

	then :

		else

		 mkdir $dir/zipalign



#sign
if [ -d "$dir/sign" ]

	then  :

		else
 
		 mkdir $dir/sign

#theme
if [ -d "$dir/theme-projects" ]

	then :

		else

		mkdir $dir/theme-projects

		
		fi
			fi
				fi
					fi
						fi
	


#choices
echo
echo
echo "---------------------MUNKY BUSINESS--------------------------"
echo "-------------------------------------------------------------"
echo "$DESC"
echo "$VERSION"
echo "-------------------------------------------------------------"
echo
echo "place apps in 'place-here-for-modding' directory"
echo
echo "-------------------------------------------------------------"


echo

echo "1)unzip apk for theming" # functional


echo "2)zip themed apk" # functional


echo "3)install frameworks - important for recompiling!!!" # test

echo "4)decompile apk for modding" # functional


echo "5)recompile" # functional


echo "6)sign apk" 


echo "7)zipalign"


echo "8)recompile as system app- will not change signature"


echo "9)install app "

echo "10)make flashable zip for system apk"
echo

echo "11)adb push"



echo "12)adb pull"

echo "13)fastboot flash recovery"

echo "14)heimdall flash recovery"
echo

echo "89)help and about" 

                                                                               
echo "99)exit" 


echo
echo
echo "------------------------------------------------------------"
echo
echo "pick your munky business"


read n

	case $n in


	
	1) # UNZIP
	
	echo
	echo
	echo
	echo "Unzipping an apk allows for the replacement of images,"
	echo "but does not allow for modification of code."
	echo
	echo "After replacing images, you must re-zip."
	echo
	echo "For more info, select 'help' from 'munky menu'"
	echo
	echo "press ENTER to continue"
	echo
	
	read

             cd $dir/place-here-for-modding

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
			
					cd $dir/place-here-for-modding
	

						OUTPUTS=`ls | sed -n $choice'p' `	



			
			unzip $dir/place-here-for-modding/$OUTPUTS -d $dir/theme-projects/$OUTPUTS

											
										


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "Unzipped files in 'theme' directory. You can now replace images for customization "
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

				
					./munky-rench ;;


	2)  # ZIP APK
	
		echo
		echo
		echo
		echo "Zipping an apk simply repackages the files from"
		echo "an unzipped apk into a useable form."
		echo
		echo "Is not a substitute for compiling apk"
		echo
		echo "After zipping, apk is ready to install."
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo	
		read
	
			 cd $dir/theme-projects

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `	



				
	
							mv $OUTPUTS temp

							cd temp
	
	
									zip -r -0 $OUTPUTS *
	
										mv $OUTPUTS themed_$OUTPUTS

											
										mv -f themed_$OUTPUTS $dir/out


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "themed apk in 'out' directory. Enjoy your new theme"
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir/theme-projects

					rm -Rf temp
		
					cd $dir

				
					./munky-rench ;;

	3) # INSTALL FRAMEWORK
	
	
		echo
		echo
		echo
		echo "Apks are designed to run within the existing"
		echo "framework of Android.  You must install the framework-res.apk"
		echo "from the /system/framework folder of your device."
		echo
		echo "Non AOSP roms usually have a proprietary framework also."
		echo "The location of these second frameworks will vary."
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo
		read
	
		cd $dir/frameworks	
			
		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `	



				
	
						apktool if $OUTPUTS

				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "Repeat process to add other frameworks "
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

				
					./munky-rench ;;


	4) # DECOMPILE
	
		echo
		echo
		echo
		echo "Decompiling an apk reduces it to its editable source."
		echo "You can change the behavior and features of the app,"
		echo "IF you know what you are doing."
		echo
		echo "SMALI and Xml are the languages you will need to edit source."
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo	
		read
	
		cd $dir/place-here-for-modding

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
			
					cd $dir/place-here-for-modding
	

						OUTPUTS=`ls | sed -n $choice'p' `	



							$dir/.TOOLS/apktool d -f $OUTPUTS  -o $dir/mod-projects/$OUTPUTS

											
								


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "Decompiled files in 'mod' directory. You can now replace images and edit or add code "
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

				
					./munky-rench ;;

	5) # RECOMPILE
	
	
		echo
		echo
		echo
		echo "This will compile the source into byte code."
		echo "The app will not be ready to install until you sign it."
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo	
		read
	
		cd $dir/mod-projects

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `	



							$dir/.TOOLS/apktool b -f $OUTPUTS -o $dir/out/$OUTPUTS


						mv $dir/out/$OUTPUTS  $dir/out/unsigned_$OUTPUTS



											
								


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "unsigned apk in 'out' directory. Sign and zipalign apk before install "
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

			
					./munky-rench ;;
	
	6)

				echo
		echo
		echo
		echo "This will sign the apk"
		echo "The app will be ready to install after you sign it."
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo	
		read
	
		cd $dir/out
		
		

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `
						#SIGN=`echo $OUTPUTS| sed -r 's/^.{9}//' `
						#OUTPUTS=$SIGN



							cd $dir/.TOOLS


						java -jar signapk.jar testkey.x509.pem /home/mike/android/munky-rench/.TOOLS/testkey.pk8 $dir/out/$OUTPUTS $dir/out/signed_$OUTPUTS



											
								


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "signed apk in 'out' directory. Sign and zipalign apk before install "
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

			
					./munky-rench ;;
			


	7) # ZIPALIGN
	
	
	
		echo "place apk to be zipaligned in 'zipalign' directory"
		
		echo "press ENTER when ready"	

			read	
		

		cd $dir/zipalign

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `
						
							

					cd $dir/.TOOLS

				./zipalign 4 $dir/zipalign/$OUTPUTS $dir/out/zipaligned_$OUTPUTS			

				
						



											
								


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "zipaligned apk in 'out' directory. "
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

			
					./munky-rench ;;
	


        8) # COMPILE AS SYSTEM APP
        
        				echo
		echo
		echo
		echo "Compiles apk using original META_INF."
		
		
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo	
		read
        
		cd $dir/mod-projects

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `	



							$dir/.TOOLS/apktool b -c $OUTPUTS -o $dir/out/$OUTPUTS
							
							mv $dir/out/$OUTPUTS $dir/out/system_$OUTPUTS 

			

											
								


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "Compiled SYSTEM apk in 'out' directory."
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

				rmdir staging

				
					./munky-rench ;;


	9)

			echo
		echo
		echo
		echo "This will install selected apk to your device."
		echo "Does not work for system apps"
		echo
		echo "For more info, select 'help' from 'munky menu'"
		echo
		echo "press ENTER to continue"
		echo	
		read
	
		cd $dir/mod-projects

		ls | cat -n

			echo
				
				echo
  

			echo "Which file? Enter number of selection or 'x' to exit"

				read choice


		
		
			
			if [ $choice = 'x' ]  ; then 
	
		
					echo "are you sure? Press ENTER to exit"
			
						read
			
							exit

			
				else	
	

						OUTPUTS=`ls | sed -n $choice'p' `	



							adb install $OUTPUTS


											
								


				echo
				echo
				echo
				echo "--------------------------------------------------------------"
				echo						 			
				echo "app installed."
				echo "ENTER to return to munky menu"

				read

		
		fi
	
				cd $dir

			
					./munky-rench ;;

	10)
		
		cd $dir/.TOOLS

			cp flashable.zip $dir/flashable.zip
			
				cd $dir

					unzip -q flashable.zip -d $dir/
					
					cp -r flashable restore

				
						rm flashable.zip
echo
echo
echo
echo
echo
echo
echo "------------------------------------------------------------------------------"
echo "Place the apk you want to flash in the proper folder inside 'flashable' directory. For example, framework-res goes in /flashable/system/framework/ "
echo
echo "To be safe, place the original app in the same place inside the folder named 'restore'. We will copy both zips to your device, so if the modded app causes a bootloop, we can flash the restore zip to fix it "
echo
echo
echo "press ENTER when apks are in place and you are ready to zip"

read

rm -rf $dir/zips

	mkdir $dir/zips

		cd flashable
		
			zip -q -r -0 flashable *

				mv $dir/flashable/flashable.zip $dir/zips/flashable.zip

					cd $dir
						
						rm -rf flashable
		

		cd restore
		
			zip -q -r -0 restore *


				mv $dir/restore/restore.zip $dir/zips/restore.zip

					cd $dir

						rm -rf restore
echo
echo
echo "Do you want to push the zips to your device? [y or n]?"


read input

	if [ $input = "y" ]
		
		then

			$dir/.TOOLS/adb devices
		
				$dir/.TOOLS/adb push $dir/zips /sdcard/

		echo "zips should now be in the root of external storage on your device"

				./munky-rench

	elif [ $input = "n" ]	

		then			
				


			cd $dir
			./munky-rench
fi

./munky-rench

	  				;;

	  				
	11) # push
	
	cd $dir
		
		mkdir push-files-from-here
		
			echo
			echo
			echo
			echo "Place files you want to push to your device in 'push-files-from-here' directory"
			echo
			echo "push ENTER to continue"
		
		read
$adb devices

	$adb push $dir/push-files-from-here /sdcard/

		echo
		echo
		echo
	echo "Files have been pushed to the root of device internal sd card"
	echo
	echo "press enter to return to munky-menu"
	
read

	cd $dir 
		
		./munky-rench

	
		;;
	
	
	
	
	12)  # pull   

	
cd $dir/.TOOLS

echo
echo
echo "type the path of the file you want to pull and press ENTER"	
#echo "Do you know the exact location of the file you want to pull? [ y or n ]?"

	#read answer

#if [ $answer = "y" ]

	#then
		#echo
		#echo
		#echo "enter complete path of file here and press ENTER"

			read path

				$adb devices
				
					$adb pull $path $dir/pulled-files-go-here/

						cd $dir

							echo "files will be in 'pulled-files-go-here' directory"

							./munky-rench

	#elif [ $answer = "n" ]
		
		#then

			#$adb shell ls | cat -n
				
				#echo
				#echo
				#echo
				#echo "Is the file you want to pull on this level of the file system [ y or n ]?"
				#echo
				#echo 
				#echo
				#echo 

			#read yorn
#
			#while [ $yorn = "n" ]
				
					#do

						#echo
						#echo
						#echo
						#echo "enter the number of the directory you want to look in and press ENTER"
						#echo
						#echo

							#read dirnum

							#newdir=`$adb shell ls | sed -n $dirnum'p' `



							      #   $adb shell cd newdir

												

										
						#echo 
						#echo
						#echo "Is the file you want to pull on this level of the file system [ y or n ]?"
						#echo
						#echo 
						#echo
						#echo 
							#read yorn


					#done
						

			#if [ $yorn = "y" ]
		
				#then

					#echo
					#echo
					#echo
					#echo "enter the number of the file you want to pull and press ENTER"
					#echo
					#echo
						#read filenum

							#	pullfile=`$adb shell ls | sed -n $filenum'p' `
								#path=`pwd `

					#$adb devices

						#$adb pull $path/pullfile $dir/pulled-files-go-here
#
							#echo "files will be in 'pulled-files-go-here' directory"

													
					

				
			
#fi



	#fi	
	
		;;
	


	13)
	
		cd $dir
			
			mkdir flash-recovery-from-here
				
				cd flash-recovery-from-here
echo
echo "-----------------------------------------------------------------"
echo "place recovery in 'flash-recovery-from-here' directory"
echo "ENTER to continue"

	read
		
					ls | cat -n
					
					echo
					echo
					echo
					echo "Choose file to flash as recovery"
					echo "---------------------------------------------------"
					
					
					read recnum
					
					recovery=`ls | sed -n $recnum'p' `
					
						mv $recovery recovery.img
							
					 		$adb reboot-bootloader

							cd $dir/.TOOLS	
							
 							./heimdall detect

							./heimdall flash --recovery $dir/flash-recovery-from-here/recovery.img

				 				
				 				echo
				 				echo
				 				echo "Recovery flashed press ENTER to return to munky menu"
						read
				 				
				 cd $dir
				 
			./munky-rench
	
		;;

	14)

echo
echo
echo
echo "Heimdall is an open-source, linux compatabile program for flashing Samsung devices. It is basically Odin with command line functionality. Press ENTER to continue." 
		
	
		cd $dir
			
			mkdir flash-recovery-from-here
				
				cd flash-recovery-from-here
echo
echo "-----------------------------------------------------------------"
echo "place recovery in 'flash-recovery-from-here' directory"
echo "ENTER to continue"

	read
		
					ls | cat -n
					
					echo
					echo
					echo
					echo "Choose file to flash as recovery"
					echo "---------------------------------------------------"
					
					
					read recnum
					
					recovery=`ls | sed -n $recnum'p' `
					
						mv $recovery recovery.img
							
					 		$adb reboot-bootloader	
							
 							sudo $fboot devices
					
				 			#sudo $fboot flash --no-reboot recovery [recovery.img]

									sudo $fboot reboot
				 				
				 				echo
				 				echo
				 				echo "Recovery flashed press ENTER to return to munky menu"
						read
				 				
				 cd $dir
				 
			./munky-rench
;;


	




		
	




	89)

			
			
			echo
			echo
			echo
			echo "                                       Help and INFO"
			echo "--------------------------------------------------------------------------------------------------"

		echo "When I made the switch to linux, I noticed that almost everything assumed some level of expertise. Program A assumed familiarity with bash, Program B assumed I knew how to add something to my PATH. The problem was, I didn't know anything. I knew enough to switch to linux, but not enough to use it. I knew that I had a lot to learn, but I wanted to tinker with Apks RITE NAO!!!"
		
		echo
		echo "What I am trying to do with this tool is provide a stop-gap program for noobs so they can tinker with apks before they really understand the process. There are so many stand-alones in windows for this type of thing, but the ones in linux have so many dependencies, that it sets the learning curve a little higher. I just want to help people adjust to modding in linux in a graduated way, while still providing a useful tool for more experienced users that don't want to type the same command fifteen times"
		
		echo
		echo "ENTER to continue"
read

	 
	 
	
	
echo	
echo	
echo	
echo "------------------------------------------------"

echo "       8    8  88888  8      88888.          "
echo "       8____8  8__    8      8     8         "
echo "       8    8  8      8      88888'          "
echo "       8    8  88888  88888  8               "
	 
echo "------------------------------------------------"
echo
echo
echo "1)zip/unzip" # 7za explanation


echo "2)apktool" # 


echo "3)signapk" # 


echo "4)zipalign" # 


echo "5)why linux is better for modding" 
echo
echo "-------------------------------------------------"
echo "What do you want to learn about?"


	read n
	
 
	
	
	if [ $n = "1" ]

		then
	
	echo
	echo
	echo
	echo
	
	echo "        8888888  888  88888.       "
	echo "           .8'    8   8     8      "
	echo "         .8'      8   88888'        "
	echo "        8888888  888  8          "
	echo 
echo "---------------------------------------------------------------------"
echo

	
	echo "Unzipping apks for theming is done to avoid having to resign the apk before install. An unzipped app is not nearly as customizable as a decompiled app. Only the images can be changed."
	echo
	echo "When compiling as a system app, unzipping is also used to copy the META_INF and AndroidManifest.xml from the original apk to the new apk. This preserves the original signature, which is important, because a system app with the wrong signature will not work, resulting in bootloops, and force close loops"
	
	read
	
	

		 
			
	elif [ $n = "2" ]

		then
		
	echo
	echo
	echo
	echo
	
	echo "          8     8888   8  _8  88888  888    888   8              " 
	echo "         8 8    8   8  888_     8   8   8  8   8  8                "
	echo "        8___8   888'   8   8    8   8   8  8   8  8                "  
	echo "       8     8  8      8    8   8    888    888   8888              "
	echo 
echo "-----------------------------------------------------------------------"
echo
	
	echo "Apktool unpacks apks from the byte code used by the compiler into the source code used by the developer, allowing you to make edits in smali files that will change the functionality of an app, or xml files that will change the appearance."
	echo
	echo "Smali/Baksmali means assemble/disassemble in Icelandic and is named that way due to the Dalvik virtual machine being named after an Icelandic fishing village. If you are not familiar with Smali, You are probably going to break your apk. That is fine, we learn through our mistakes, but always save a copy of the original and be prepared to reflash if you bootloop."
	echo
	echo "Xml is a markup language, similar to HTML in that it controls how information is displayed. Xml files have color information, app name, and pretty much any text throughout the app. For instance, values/colors.xml contains color info. Xml can break the apk also, so don't make too many changes without testing.,"
	
read

              

			
	elif [ $n = "3" ]

		then
	

echo
	echo
	echo
	echo
	
	echo "        888   888    888    8    8      8     8888b   8   8           " 
	echo "       8   '   8    8   8   88   8     8 8    8    8  8  8          "
	echo "        888    8   8   ___  8 8  8    8   8   88888'  8888            "  
	echo "       ,   8   8    8   8   8  8 8   8888888  8       8   8           "
	echo "        888   888    8888   8   88  8       8 8       8     8        "
echo
echo "-----------------------------------------------------------------------------" 
echo
	
	echo "Signapk creates new META-INF and keys for the apk to allow it to function within the android framework. While system apps need to keep the same shared key as the other system apps, regular apps will install fine with any functional key"
	echo
	echo "Unsigned or incorrectly signed apps will cause parsing errors and failed installs. If you do a regular recompile, you MUST sign the apk, or it WILL NOT work. It won't hurt anything, but it will waste your time."
	echo
	echo ""
	read

                

			elif [ $n = "4" ]

		then

echo
	echo
	echo
	echo
	
	echo "       8888888  888  88888.    8    8     888   888.   8    8        " 
	echo "          .8'    8   8     8  8 8   8      8   8  ___  88.  8       "
	echo "        .8'      8   88888'  8---8  8      8   8   8   8 '8 8       "  
	echo "       8888888  888  8      8     8 88888 888   888    8   88       "
	echo 
echo "------------------------------------------------------------------------------"
echo
echo "Zipaligning is the procress of aligning all unarchived information in an apk in a way that the system doesnt have to look for any resources. It is an optimization thet is done for speed and efficiency purposes. Zipaligning must be perfomed last, as other processes will mess up the alignment."

read
		
	

	elif [ $n = "5" ]

		then

	echo
	echo
	echo
	echo

	echo "       8      888  8    8  8   8  88   88   "
	echo "       8       8   8 8  8  8   8    8 8      "
	echo "       8       8   8  8 8  8   8    8 8        "
	echo "       88888  888  8   88  88888  88   88      "
	echo
	echo "-------------------------------------------------------"
	echo
	echo "Linux is better for development because I say so."
	echo
	echo "And because it was designed by developers to be an open easy platform to develop on. Terminal is better than CMD. Android is based on the linux kernel, so it's all gravy. " 		
	read
			

fi

cd $dir
./munky-rench
		
			;;    
	



	99)


		exit 0

exit 1 ;;



esac

read 



exit 0
